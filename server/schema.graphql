type Action implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  type: String!
  sprintid: String
  timestamp: Datetime!
  payload: JSON

  """Reads a single `Sprint` that is related to this `Action`."""
  sprintBySprintid: Sprint
}

"""
A condition to be used against `Action` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ActionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `sprintid` field."""
  sprintid: String

  """Checks for equality with the object’s `timestamp` field."""
  timestamp: Datetime
}

"""An input for mutations affecting `Action`"""
input ActionInput {
  id: Int
  type: String!
  sprintid: String
  timestamp: Datetime!
  payload: JSON
}

"""
Represents an update to a `Action`. Fields that are set will be updated.
"""
input ActionPatch {
  id: Int
  type: String
  sprintid: String
  timestamp: Datetime
  payload: JSON
}

"""A connection to a list of `Action` values."""
type ActionsConnection {
  """A list of `Action` objects."""
  nodes: [Action!]!

  """
  A list of edges which contains the `Action` and cursor to aid in pagination.
  """
  edges: [ActionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Action` you could get from the connection."""
  totalCount: Int!
}

"""A `Action` edge in the connection."""
type ActionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Action` at the end of the edge."""
  node: Action!
}

"""Methods to use when ordering `Action`."""
enum ActionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SPRINTID_ASC
  SPRINTID_DESC
  TIMESTAMP_ASC
  TIMESTAMP_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the create `Action` mutation."""
input CreateActionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Action` to be created by this mutation."""
  action: ActionInput!
}

"""The output of our create `Action` mutation."""
type CreateActionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Action` that was created by this mutation."""
  action: Action

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Sprint` that is related to this `Action`."""
  sprintBySprintid: Sprint

  """An edge for our `Action`. May be used by Relay 1."""
  actionEdge(
    """The method to use when ordering `Action`."""
    orderBy: [ActionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ActionsEdge
}

"""All input for the create `Sprint` mutation."""
input CreateSprintInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Sprint` to be created by this mutation."""
  sprint: SprintInput!
}

"""The output of our create `Sprint` mutation."""
type CreateSprintPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Sprint` that was created by this mutation."""
  sprint: Sprint

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Sprint`. May be used by Relay 1."""
  sprintEdge(
    """The method to use when ordering `Sprint`."""
    orderBy: [SprintsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SprintsEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteActionByNodeId` mutation."""
input DeleteActionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Action` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteAction` mutation."""
input DeleteActionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Action` mutation."""
type DeleteActionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Action` that was deleted by this mutation."""
  action: Action
  deletedActionNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Sprint` that is related to this `Action`."""
  sprintBySprintid: Sprint

  """An edge for our `Action`. May be used by Relay 1."""
  actionEdge(
    """The method to use when ordering `Action`."""
    orderBy: [ActionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ActionsEdge
}

"""All input for the `deleteSprintByNodeId` mutation."""
input DeleteSprintByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Sprint` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSprint` mutation."""
input DeleteSprintInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""The output of our delete `Sprint` mutation."""
type DeleteSprintPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Sprint` that was deleted by this mutation."""
  sprint: Sprint
  deletedSprintNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Sprint`. May be used by Relay 1."""
  sprintEdge(
    """The method to use when ordering `Sprint`."""
    orderBy: [SprintsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SprintsEdge
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Action`."""
  createAction(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateActionInput!
  ): CreateActionPayload

  """Creates a single `Sprint`."""
  createSprint(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSprintInput!
  ): CreateSprintPayload

  """Updates a single `Action` using its globally unique id and a patch."""
  updateActionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateActionByNodeIdInput!
  ): UpdateActionPayload

  """Updates a single `Action` using a unique key and a patch."""
  updateAction(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateActionInput!
  ): UpdateActionPayload

  """Updates a single `Sprint` using its globally unique id and a patch."""
  updateSprintByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSprintByNodeIdInput!
  ): UpdateSprintPayload

  """Updates a single `Sprint` using a unique key and a patch."""
  updateSprint(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSprintInput!
  ): UpdateSprintPayload

  """Deletes a single `Action` using its globally unique id."""
  deleteActionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteActionByNodeIdInput!
  ): DeleteActionPayload

  """Deletes a single `Action` using a unique key."""
  deleteAction(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteActionInput!
  ): DeleteActionPayload

  """Deletes a single `Sprint` using its globally unique id."""
  deleteSprintByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSprintByNodeIdInput!
  ): DeleteSprintPayload

  """Deletes a single `Sprint` using a unique key."""
  deleteSprint(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSprintInput!
  ): DeleteSprintPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Action`."""
  actions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Action`."""
    orderBy: [ActionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ActionCondition
  ): ActionsConnection

  """Reads and enables pagination through a set of `Sprint`."""
  sprints(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Sprint`."""
    orderBy: [SprintsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SprintCondition
  ): SprintsConnection
  action(id: Int!): Action
  sprint(id: String!): Sprint

  """Reads a single `Action` using its globally unique `ID`."""
  actionByNodeId(
    """The globally unique `ID` to be used in selecting a single `Action`."""
    nodeId: ID!
  ): Action

  """Reads a single `Sprint` using its globally unique `ID`."""
  sprintByNodeId(
    """The globally unique `ID` to be used in selecting a single `Sprint`."""
    nodeId: ID!
  ): Sprint
}

type Sprint implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: String!
  title: String

  """Reads and enables pagination through a set of `Action`."""
  actionsBySprintid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Action`."""
    orderBy: [ActionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ActionCondition
  ): ActionsConnection!
}

"""
A condition to be used against `Sprint` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SprintCondition {
  """Checks for equality with the object’s `id` field."""
  id: String
}

"""An input for mutations affecting `Sprint`"""
input SprintInput {
  id: String!
  title: String
}

"""
Represents an update to a `Sprint`. Fields that are set will be updated.
"""
input SprintPatch {
  id: String
  title: String
}

"""A connection to a list of `Sprint` values."""
type SprintsConnection {
  """A list of `Sprint` objects."""
  nodes: [Sprint!]!

  """
  A list of edges which contains the `Sprint` and cursor to aid in pagination.
  """
  edges: [SprintsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Sprint` you could get from the connection."""
  totalCount: Int!
}

"""A `Sprint` edge in the connection."""
type SprintsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Sprint` at the end of the edge."""
  node: Sprint!
}

"""Methods to use when ordering `Sprint`."""
enum SprintsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the `updateActionByNodeId` mutation."""
input UpdateActionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Action` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Action` being updated.
  """
  patch: ActionPatch!
}

"""All input for the `updateAction` mutation."""
input UpdateActionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Action` being updated.
  """
  patch: ActionPatch!
  id: Int!
}

"""The output of our update `Action` mutation."""
type UpdateActionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Action` that was updated by this mutation."""
  action: Action

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Sprint` that is related to this `Action`."""
  sprintBySprintid: Sprint

  """An edge for our `Action`. May be used by Relay 1."""
  actionEdge(
    """The method to use when ordering `Action`."""
    orderBy: [ActionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ActionsEdge
}

"""All input for the `updateSprintByNodeId` mutation."""
input UpdateSprintByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Sprint` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Sprint` being updated.
  """
  patch: SprintPatch!
}

"""All input for the `updateSprint` mutation."""
input UpdateSprintInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Sprint` being updated.
  """
  patch: SprintPatch!
  id: String!
}

"""The output of our update `Sprint` mutation."""
type UpdateSprintPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Sprint` that was updated by this mutation."""
  sprint: Sprint

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Sprint`. May be used by Relay 1."""
  sprintEdge(
    """The method to use when ordering `Sprint`."""
    orderBy: [SprintsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SprintsEdge
}
